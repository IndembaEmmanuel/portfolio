---
import {
    loadTranslations,
    translate,
} from "../../i18n/i18n";

// @ts-ignore
const currentLanguage = Astro.locals.lang || Astro.currentLocale || 'fr';

const translations = await loadTranslations(currentLanguage);
const t = (key: string) => translate(translations, key);

type Skill = {
    name: string;
    icon: string;
};

interface SkillsData {
    frontend: Skill[];
    backend: Skill[];
    database: Skill[];
    devops: Skill[];
}

const skills: SkillsData = {
    frontend: [
        { name: "React", icon: "devicon-react-original colored" },
        { name: "Next.js", icon: "devicon-nextjs-plain" },
        { name: "Astro", icon: "devicon-astro-plain colored" },
        { name: "Vue.js", icon: "devicon-vuejs-plain colored" },
        { name: "Vanilla JS", icon: "devicon-javascript-plain colored" },
        { name: "TypeScript", icon: "devicon-typescript-plain colored" },
    ],
    backend: [
        { name: "Node.js", icon: "devicon-nodejs-plain colored" },
        { name: "Django", icon: "devicon-django-plain" },
        { name: "Express", icon: "devicon-express-original" },
    ],
    database: [
        { name: "PostgreSQL", icon: "devicon-postgresql-plain colored" },
        { name: "MongoDB", icon: "devicon-mongodb-plain colored" },
    ],
    devops: [
        { name: "Docker", icon: "devicon-docker-plain colored" },
        { name: "Git", icon: "devicon-git-plain colored" },
        { name: "GitLab", icon: "devicon-gitlab-plain colored" },
        { name: "AWS", icon: "devicon-amazonwebservices-plain colored" },
        { name: "Vercel", icon: "devicon-vercel-plain" },
    ],
};
---

<section id="skills" class="skills-section">
    <div class="container">
        <h2 class="section-title" data-aos="fade-up">{t("skills.title")}</h2>
        
        <div class="skills-categories">
            {/* Utilisation d'un composant réutilisable pour chaque catégorie */}
            {Object.entries(skills).map(([category, skillsList], categoryIndex: number) => (
                <div class="skills-category" data-aos="fade-up" data-aos-delay={200 + (categoryIndex * 100)}>
                    <h3 class="category-title">{t(`skills.${category}`)}</h3>
                    <div class="skills-grid">
                        {skillsList.map((skill: Skill, index: number) => (
                            <div class="skill-item" data-aos="zoom-in" data-aos-delay={300 + (index * 50) + (categoryIndex * 100)}>
                                <i class={skill.icon}></i>
                                <span class="skill-name">{skill.name}</span>
                            </div>
                        ))}
                    </div>
                </div>
            ))}
        </div>
    </div>
</section>

<style>
    .skills-section {
        background-color: var(--color-bg-primary);
        padding: 5rem 0;
        position: relative;
        overflow: hidden;
    }
    
    .skills-section::before {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: radial-gradient(
            circle at bottom left,
            rgba(52, 152, 219, 0.1),
            transparent 50%
        );
        z-index: 0;
    }
    
    .container {
        position: relative;
        z-index: 1;
    }
    
    .section-title {
        font-size: 2.5rem;
        text-align: center;
        margin-bottom: 3rem;
        color: var(--color-text-primary);
    }
    
    .skills-categories {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
    }
    
    .skills-category {
        background-color: var(--color-bg-secondary);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.05);
    }
    
    .skills-category:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
    }
    
    .category-title {
        font-size: 1.5rem;
        margin-bottom: 1.5rem;
        color: var(--color-accent);
        text-align: center;
        position: relative;
        padding-bottom: 0.5rem;
    }
    
    .category-title::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 50px;
        height: 3px;
        background-color: var(--color-accent);
        border-radius: 3px;
    }
    
    .skills-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
        gap: 1.5rem;
    }
    
    .skill-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }
    
    .skill-item i {
        font-size: 2.5rem;
        margin-bottom: 0.5rem;
        transition: transform 0.3s ease;
    }
    
    .skill-item:hover i {
        transform: scale(1.2);
    }
    
    .skill-name {
        font-size: 0.85rem;
        color: var(--color-text-secondary);
    }
    
    /* Media queries */
    @media (max-width: 992px) {
        .skills-categories {
            grid-template-columns: repeat(2, 1fr);
        }
    }
    
    @media (max-width: 768px) {
        .skills-section {
            padding: 4rem 1rem;
        }
        
        .section-title {
            font-size: 2rem;
            margin-bottom: 2rem;
        }
        
        .skills-categories {
            grid-template-columns: 1fr;
        }
        
        .skills-grid {
            grid-template-columns: repeat(auto-fill, minmax(70px, 1fr));
            gap: 1rem;
        }
        
        .skill-item i {
            font-size: 2rem;
        }
    }
    
    @media (max-width: 480px) {
        .skills-grid {
            grid-template-columns: repeat(3, 1fr);
        }
    }
</style>
